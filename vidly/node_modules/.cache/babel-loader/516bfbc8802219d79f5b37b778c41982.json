{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NZY\\\\Desktop\\\\vidly\\\\start\\\\vidly\\\\src\\\\components\\\\movies.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MoviesTable from './moviesTable';\nimport ListGroup from './common/listGroup';\nimport Pagination from './common/pagination';\nimport { getMoviesApi, deleteMovieApi } from '../services/movieService';\nimport { getGenresApi } from '../services/genreService';\nimport { paginate } from '../utils/paginate';\nimport _ from 'lodash';\nimport SearchBox from './searchBox';\nimport AnimateMovieCover from './animatedMovieCover';\nimport Hero from './common/hero'; // TODO:: refactor the movieCover to take an object property\n// TODO:: changed the movieCover functionality -> onMouseHover remove the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4,\n      searchQuery: '',\n      selectedGenre: null,\n      sortColumn: {\n        path: 'title',\n        order: 'asc'\n      },\n      currentMovieCover: null,\n      fullImgVisible: false\n    };\n\n    this.handleDelete = async movie => {\n      const originalMovies = this.state.movies;\n      const movies = originalMovies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n\n      try {\n        await deleteMovieApi(movie._id);\n      } catch (err) {\n        if (err.response && err.response.status === 404) {\n          console.log(`Error: ${err}`);\n          this.setState({\n            movies: originalMovies\n          });\n        }\n      }\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: '',\n        currentPage: 1\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.handleDisplayCover = id => {\n      const currentMovieCover = this.state.movies.find(movie => movie._id === id);\n      this.setState({\n        currentMovieCover,\n        fullImgVisible: true\n      });\n      console.log(this.state.currentMovieCover);\n    };\n\n    this.handleHideCover = () => {\n      this.setState({\n        fullImgVisible: false\n      });\n    };\n\n    this.getPagedData = () => {\n      const {\n        pageSize,\n        currentPage,\n        sortColumn,\n        selectedGenre,\n        searchQuery,\n        movies: allMovies\n      } = this.state;\n      let filtered = allMovies;\n      if (searchQuery) filtered = allMovies.filter(m => m.title.toLowerCase().startsWith(searchQuery.toLowerCase()));else if (selectedGenre && selectedGenre._id) filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      data: movies\n    } = await getMoviesApi();\n    const {\n      data: genresApi\n    } = await getGenresApi();\n    const genres = [{\n      _id: '',\n      name: 'All Genres'\n    }, ...genresApi];\n    this.setState({\n      movies,\n      genres\n    });\n  } //!:: optimistic delete\n\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      sortColumn,\n      searchQuery,\n      currentMovieCover\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no movies in the database.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }, this);\n    const {\n      totalCount,\n      data: movies\n    } = this.getPagedData();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-image mt-2 mb-5\",\n          children: /*#__PURE__*/_jsxDEV(Hero, {\n            description: \"learning how things work in React JS\",\n            title: \"movie app\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-3\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup, {\n              items: this.state.genres,\n              selectedItem: this.state.selectedGenre,\n              onItemSelect: this.handleGenreSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), currentMovieCover && /*#__PURE__*/_jsxDEV(AnimateMovieCover, {\n              movieSrc: currentMovieCover.movieCover,\n              setShowImg: this.state.fullImgVisible\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/movies/new\",\n              className: \"btn btn-primary\",\n              style: {\n                marginBottom: 20\n              },\n              children: \"New Movie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Showing \", totalCount, \" movies in the database.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n              value: searchQuery,\n              onChange: this.handleSearch\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MoviesTable, {\n              movies: movies,\n              sortColumn: sortColumn,\n              onLike: this.handleLike,\n              onDelete: this.handleDelete,\n              onSort: this.handleSort,\n              onHandleDisplayMovieCover: this.handleDisplayCover,\n              handleHideCover: this.handleHideCover\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n              itemsCount: totalCount,\n              pageSize: pageSize,\n              currentPage: currentPage,\n              onPageChange: this.handlePageChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["C:/Users/NZY/Desktop/vidly/start/vidly/src/components/movies.jsx"],"names":["React","Component","Link","MoviesTable","ListGroup","Pagination","getMoviesApi","deleteMovieApi","getGenresApi","paginate","_","SearchBox","AnimateMovieCover","Hero","Movies","state","movies","genres","currentPage","pageSize","searchQuery","selectedGenre","sortColumn","path","order","currentMovieCover","fullImgVisible","handleDelete","movie","originalMovies","filter","m","_id","setState","err","response","status","console","log","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","handleSearch","query","handleSort","handleDisplayCover","id","find","handleHideCover","getPagedData","allMovies","filtered","title","toLowerCase","startsWith","sorted","orderBy","totalCount","length","data","componentDidMount","genresApi","name","render","count","movieCover","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport MoviesTable from './moviesTable'\nimport ListGroup from './common/listGroup'\nimport Pagination from './common/pagination'\nimport { getMoviesApi, deleteMovieApi } from '../services/movieService'\nimport { getGenresApi } from '../services/genreService'\nimport { paginate } from '../utils/paginate'\nimport _ from 'lodash'\nimport SearchBox from './searchBox'\n\nimport AnimateMovieCover from './animatedMovieCover'\nimport Hero from './common/hero'\n\n// TODO:: refactor the movieCover to take an object property\n// TODO:: changed the movieCover functionality -> onMouseHover remove the component\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    currentPage: 1,\n    pageSize: 4,\n    searchQuery: '',\n    selectedGenre: null,\n    sortColumn: { path: 'title', order: 'asc' },\n    currentMovieCover: null,\n    fullImgVisible: false,\n  }\n\n  async componentDidMount() {\n    const { data: movies } = await getMoviesApi()\n    const { data: genresApi } = await getGenresApi()\n\n    const genres = [{ _id: '', name: 'All Genres' }, ...genresApi]\n    this.setState({\n      movies,\n      genres,\n    })\n  }\n\n  //!:: optimistic delete\n  handleDelete = async (movie) => {\n    const originalMovies = this.state.movies\n\n    const movies = originalMovies.filter((m) => m._id !== movie._id)\n    this.setState({ movies })\n\n    try {\n      await deleteMovieApi(movie._id)\n    } catch (err) {\n      if (err.response && err.response.status === 404) {\n        console.log(`Error: ${err}`)\n\n        this.setState({\n          movies: originalMovies,\n        })\n      }\n    }\n  }\n\n  handleLike = (movie) => {\n    const movies = [...this.state.movies]\n    const index = movies.indexOf(movie)\n    movies[index] = { ...movies[index] }\n    movies[index].liked = !movies[index].liked\n    this.setState({ movies })\n  }\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page })\n  }\n\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, searchQuery: '', currentPage: 1 })\n  }\n\n  handleSearch = (query) => {\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 })\n  }\n\n  handleSort = (sortColumn) => {\n    this.setState({ sortColumn })\n  }\n\n  handleDisplayCover = (id) => {\n    const currentMovieCover = this.state.movies.find(\n      (movie) => movie._id === id,\n    )\n\n    this.setState({\n      currentMovieCover,\n      fullImgVisible: true,\n    })\n\n    console.log(this.state.currentMovieCover)\n  }\n\n  handleHideCover = () => {\n    this.setState({\n      fullImgVisible: false,\n    })\n  }\n\n  getPagedData = () => {\n    const {\n      pageSize,\n      currentPage,\n      sortColumn,\n      selectedGenre,\n      searchQuery,\n      movies: allMovies,\n    } = this.state\n\n    let filtered = allMovies\n\n    if (searchQuery)\n      filtered = allMovies.filter((m) =>\n        m.title.toLowerCase().startsWith(searchQuery.toLowerCase()),\n      )\n    else if (selectedGenre && selectedGenre._id)\n      filtered = allMovies.filter((m) => m.genre._id === selectedGenre._id)\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order])\n\n    const movies = paginate(sorted, currentPage, pageSize)\n\n    return { totalCount: filtered.length, data: movies }\n  }\n\n  render() {\n    const { length: count } = this.state.movies\n    const {\n      pageSize,\n      currentPage,\n      sortColumn,\n      searchQuery,\n      currentMovieCover,\n    } = this.state\n\n    if (count === 0) return <p>There are no movies in the database.</p>\n\n    const { totalCount, data: movies } = this.getPagedData()\n\n    return (\n      <>\n        <div className=\"container\">\n          <div className=\"bg-image mt-2 mb-5\">\n            <Hero\n              description=\"learning how things work in React JS\"\n              title=\"movie app\"\n            />\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <ListGroup\n                items={this.state.genres}\n                selectedItem={this.state.selectedGenre}\n                onItemSelect={this.handleGenreSelect}\n              />\n\n              {currentMovieCover && (\n                <AnimateMovieCover\n                  movieSrc={currentMovieCover.movieCover}\n                  setShowImg={this.state.fullImgVisible}\n                />\n              )}\n            </div>\n\n            <div className=\"col\">\n              <Link\n                to=\"/movies/new\"\n                className=\"btn btn-primary\"\n                style={{ marginBottom: 20 }}\n              >\n                New Movie\n              </Link>\n\n              <p>Showing {totalCount} movies in the database.</p>\n\n              <SearchBox value={searchQuery} onChange={this.handleSearch} />\n\n              <MoviesTable\n                movies={movies}\n                sortColumn={sortColumn}\n                onLike={this.handleLike}\n                onDelete={this.handleDelete}\n                onSort={this.handleSort}\n                onHandleDisplayMovieCover={this.handleDisplayCover}\n                handleHideCover={this.handleHideCover}\n              />\n\n              <Pagination\n                itemsCount={totalCount}\n                pageSize={pageSize}\n                currentPage={currentPage}\n                onPageChange={this.handlePageChange}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Movies\n"]},"metadata":{},"sourceType":"module"}