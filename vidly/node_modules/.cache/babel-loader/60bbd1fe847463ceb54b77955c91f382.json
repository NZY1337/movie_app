{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandr\\\\Desktop\\\\stuffs\\\\projects\\\\vidly_good\\\\vidly\\\\src\\\\components\\\\movieForm.jsx\";\nimport React from 'react';\nimport Joi from 'joi-browser';\nimport Form from './common/form';\nimport { getMovie, saveMovie } from '../services/movieService';\nimport { getGenresApi } from '../services/genreService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MovieForm extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        _id: null,\n        title: '',\n        genreId: '',\n        numberInStock: '',\n        dailyRentalRate: '',\n        movieCover: '',\n        liked: false\n      },\n      genres: [],\n      errors: {}\n    };\n    this.schema = {\n      _id: Joi.string(),\n      title: Joi.string().required().label('Title'),\n      genreId: Joi.string().required().label('Genre'),\n      numberInStock: Joi.number().required().min(0).max(100).label('Number in Stock'),\n      dailyRentalRate: Joi.number().required().min(0).max(10).label('Daily Rental Rate'),\n      movieCover: Joi.string().required().label('Movie Cover'),\n      liked: Joi.boolean().label('Add To Favorite')\n    };\n\n    this.doSubmitMovie = async () => {\n      await saveMovie(this.state.data);\n      this.props.history.push('/movies');\n    };\n  }\n\n  async populateGenres() {\n    const {\n      data: genres\n    } = await getGenresApi();\n    this.setState({\n      genres\n    });\n  }\n\n  async populateMovie() {\n    try {\n      // detect if we edit a new movie or not\n      const movieId = this.props.match.params.id;\n      if (movieId === 'new') return;\n      const {\n        data: movie\n      } = await getMovie(movieId);\n      this.setState({\n        data: this.mapToViewModel(movie)\n      });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404) {\n        this.props.history.replace('/not-found');\n      }\n    }\n  }\n\n  async componentDidMount() {\n    await this.populateGenres();\n    await this.populateMovie();\n  }\n\n  mapToViewModel(movie) {\n    return {\n      //   !delete the id when submitting this\n      _id: movie._id,\n      title: movie.title,\n      genreId: movie.genre._id,\n      numberInStock: movie.numberInStock,\n      dailyRentalRate: movie.dailyRentalRate,\n      movieCover: movie.movieCover,\n      liked: movie.liked\n    };\n  }\n\n  render() {\n    const {\n      liked\n    } = this.state.data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Edit Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            className: \"edit-form-movie\",\n            children: [this.renderInput('title', 'Title'), this.renderSelect('genreId', 'Genre', this.state.genres), this.renderInput('numberInStock', 'Number in Stock', 'number'), this.renderInput('dailyRentalRate', 'Rate'), this.renderInput('movieCover', 'Movie Cover', 'url'), this.renderInput('liked', 'Add To Favorite', 'checkbox', liked), this.renderButton('Save')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MovieForm;","map":{"version":3,"sources":["C:/Users/mandr/Desktop/stuffs/projects/vidly_good/vidly/src/components/movieForm.jsx"],"names":["React","Joi","Form","getMovie","saveMovie","getGenresApi","MovieForm","state","data","_id","title","genreId","numberInStock","dailyRentalRate","movieCover","liked","genres","errors","schema","string","required","label","number","min","max","boolean","doSubmitMovie","props","history","push","populateGenres","setState","populateMovie","movieId","match","params","id","movie","mapToViewModel","ex","response","status","replace","componentDidMount","genre","render","handleSubmit","renderInput","renderSelect","renderButton"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Joi from 'joi-browser'\r\nimport Form from './common/form'\r\nimport { getMovie, saveMovie } from '../services/movieService'\r\nimport { getGenresApi } from '../services/genreService'\r\n\r\nclass MovieForm extends Form {\r\n  state = {\r\n    data: {\r\n      _id:null,\r\n      title: '',\r\n      genreId: '',\r\n      numberInStock: '',\r\n      dailyRentalRate: '',\r\n      movieCover: '',\r\n      liked: false,\r\n    },\r\n    genres: [],\r\n    errors: {},\r\n  }\r\n\r\n  schema = {\r\n    _id: Joi.string(),\r\n    title: Joi.string().required().label('Title'),\r\n    genreId: Joi.string().required().label('Genre'),\r\n    numberInStock: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(100)\r\n      .label('Number in Stock'),\r\n    dailyRentalRate: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(10)\r\n      .label('Daily Rental Rate'),\r\n    movieCover: Joi.string().required().label('Movie Cover'),\r\n    liked: Joi.boolean().label('Add To Favorite'),\r\n  }\r\n\r\n  async populateGenres() {\r\n    const { data: genres } = await getGenresApi()\r\n    this.setState({ genres })\r\n  }\r\n\r\n  async populateMovie() {\r\n    try {\r\n      // detect if we edit a new movie or not\r\n      const movieId = this.props.match.params.id\r\n      if (movieId === 'new') return\r\n\r\n      const { data: movie } = await getMovie(movieId)\r\n\r\n      this.setState({ data: this.mapToViewModel(movie) })\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404) {\r\n        this.props.history.replace('/not-found')\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.populateGenres()\r\n    await this.populateMovie()\r\n  }\r\n\r\n  mapToViewModel(movie) {\r\n    return {\r\n      //   !delete the id when submitting this\r\n      _id: movie._id,\r\n      title: movie.title,\r\n      genreId: movie.genre._id,\r\n      numberInStock: movie.numberInStock,\r\n      dailyRentalRate: movie.dailyRentalRate,\r\n      movieCover: movie.movieCover,\r\n      liked: movie.liked,\r\n    }\r\n  }\r\n\r\n  doSubmitMovie = async () => {\r\n    await saveMovie(this.state.data)\r\n\r\n    this.props.history.push('/movies')\r\n  }\r\n\r\n  render() {\r\n    const { liked } = this.state.data\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-lg-8\">\r\n            <h1>Edit Movie</h1>\r\n            <form onSubmit={this.handleSubmit} className=\"edit-form-movie\">\r\n              {this.renderInput('title', 'Title')}\r\n              {this.renderSelect('genreId', 'Genre', this.state.genres)}\r\n              {this.renderInput('numberInStock', 'Number in Stock', 'number')}\r\n              {this.renderInput('dailyRentalRate', 'Rate')}\r\n              {this.renderInput('movieCover', 'Movie Cover', 'url')}\r\n              {this.renderInput('liked', 'Add To Favorite', 'checkbox', liked)}\r\n              {this.renderButton('Save')}\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieForm\r\n"]},"metadata":{},"sourceType":"module"}